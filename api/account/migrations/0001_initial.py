# Generated by Django 5.0.6 on 2024-08-21 11:28

from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("email", models.EmailField(max_length=255, unique=True)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("receive_message", models.BooleanField(default=True)),
                ("fname", models.CharField(blank=True, max_length=50, null=True)),
                ("lname", models.CharField(blank=True, max_length=50, null=True)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                ("city", models.CharField(blank=True, max_length=100, null=True)),
                ("gender", models.JSONField(blank=True, null=True)),
                ("sexuality", models.JSONField(blank=True, null=True)),
                ("relationship", models.JSONField(blank=True, null=True)),
                ("education_level", models.JSONField(blank=True, null=True)),
                ("career_field", models.JSONField(blank=True, null=True)),
                ("income_range", models.JSONField(blank=True, null=True)),
                ("religious_status", models.JSONField(blank=True, null=True)),
                ("political_views", models.JSONField(blank=True, null=True)),
                ("smoke_status", models.JSONField(blank=True, null=True)),
                ("favourite_drink", models.JSONField(blank=True, null=True)),
                ("dietary_preferences", models.JSONField(blank=True, null=True)),
                ("exersize_week", models.JSONField(blank=True, null=True)),
                ("hobbies_interests", models.JSONField(blank=True, null=True)),
                ("like_traveling", models.JSONField(blank=True, null=True)),
                ("pet", models.JSONField(blank=True, null=True)),
                ("children_number", models.JSONField(blank=True, null=True)),
                ("live_place", models.JSONField(blank=True, null=True)),
                ("communication_style", models.JSONField(blank=True, null=True)),
                ("love_language", models.JSONField(blank=True, null=True)),
                ("personality", models.JSONField(blank=True, null=True)),
                ("culture", models.JSONField(blank=True, null=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
